(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{272:function(t,a,_){t.exports=_.p+"assets/img/TCP_IP.6843d1e1.png"},273:function(t,a,_){t.exports=_.p+"assets/img/case1.17c1df3f.png"},274:function(t,a,_){t.exports=_.p+"assets/img/case2.d369591a.png"},275:function(t,a,_){t.exports=_.p+"assets/img/tcp_connect.51f36c41.png"},276:function(t,a,_){t.exports=_.p+"assets/img/request_header.aea3c0b2.png"},277:function(t,a,_){t.exports=_.p+"assets/img/response_header.a808e1e5.png"},293:function(t,a,_){"use strict";_.r(a);var v=_(14),e=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("h2",{attrs:{id:"http-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-是什么"}},[t._v("#")]),t._v(" HTTP 是什么？")]),t._v(" "),a("p",[t._v("简单的说 HTTP 是超文本传输协议。所谓"),a("strong",[t._v("超文本")]),t._v('，就是"超越了普通文本的文本"，他是文字、图片、音频和视频等的混合体，最关键的是含有超链接。我们熟知的 HTML 就是一种"超文本"。传输就是计算机之间传输数据的约定和规范。协议是指使用计算机能够理解的语言确立的的一种计算机之间交流通信的规范，以及相关的各种控制和错误的处理方式。\n总结来说，'),a("code",[t._v("HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范。")])]),t._v(" "),a("h2",{attrs:{id:"与-http-有关的各种概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与-http-有关的各种概念"}},[t._v("#")]),t._v(" 与 HTTP 有关的各种概念")]),t._v(" "),a("h3",{attrs:{id:"_1-浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器"}},[t._v("#")]),t._v(" 1. 浏览器")]),t._v(" "),a("p",[t._v("浏览器的正式名字叫 "),a("code",[t._v("Web Browser")]),t._v("，顾名思义，就是检索、查看互联网上资源的应用程序。"),a("code",[t._v("Web")]),t._v(" 实际上指的就是 "),a("code",[t._v("World Wide Web")]),t._v("，也就是万维网。")]),t._v(" "),a("p",[t._v("浏览器本质上是 "),a("code",[t._v("HTTP")]),t._v(" 协议中的请求方，使用 "),a("code",[t._v("HTTP")]),t._v(" 协议获取网络上的各种资源。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("HTTP")]),t._v(" 协议里，浏览器的角色被称为 "),a("code",[t._v("User Agent")]),t._v(' 即 "用户代理"，意思是作为访问者的 "代理" 来发起 '),a("code",[t._v("HTTP")]),t._v(' 请求。我们通常也简单的称之为 "客户端"。')]),t._v(" "),a("h3",{attrs:{id:"_2-web-服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-web-服务器"}},[t._v("#")]),t._v(" 2. Web 服务器")]),t._v(" "),a("p",[t._v("浏览器作为 "),a("code",[t._v("HTTP")]),t._v(" 协议的请求方，服务器作为协议的响应方。它是 HTTP 协议里响应请求的主体，通常也把控着绝大多数的网络资源，在网络世界里处于强势地位。")]),t._v(" "),a("h3",{attrs:{id:"_3-cdn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-cdn"}},[t._v("#")]),t._v(" 3. CDN")]),t._v(" "),a("p",[t._v("浏览器和服务器是 "),a("code",[t._v("HTTP")]),t._v(' 协议的两个端点，浏览器通常不会直接连接到服务器，中间会经过 "重重关卡"，CDN 就是其中一个重要的角色。')]),t._v(" "),a("p",[t._v("CDN，全称是“Content Delivery Network”（内容分发网络）。它应用了 HTTP 协议里的缓存和代理技术，代替源站响应客户端的请求。")]),t._v(" "),a("p",[t._v("那么，为什么要使用 CDN 呢？")]),t._v(" "),a("p",[t._v('简单来说，CDN 可以缓存服务器的数据，让浏览器的请求不用 "千里迢迢" 地到达源站服务器，直接在 "半路" 就可以获取响应。CDN 可以找到离浏览器最近的节点，直接返回缓存数据，大幅度缩短来响应时间。在网页开发中，我们经常将一些 JS 文件、图片等资源上传到 CDN 中，来优化网站的响应速度。')]),t._v(" "),a("h3",{attrs:{id:"_4-html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-html"}},[t._v("#")]),t._v(" 4. HTML")]),t._v(" "),a("p",[t._v("HTML 是 HTTP 协议传输的主要内容之一，它描述了超文本页面，用各种“标签”定义文字、图片等资源和排版布局，最终由浏览器“渲染”出可视化页面。")]),t._v(" "),a("h3",{attrs:{id:"_5-webservice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-webservice"}},[t._v("#")]),t._v(" 5. WebService")]),t._v(" "),a("p",[t._v("WebService 是一种 Web 应用程序，WebService是一种跨编程语言和跨操作系统平台的远程调用技术。")]),t._v(" "),a("p",[t._v("Web Service 是一种由 W3C 定义的应用服务开发规范，使用 client-server 主从架构，通常使用 WSDL 定义服务接口，使用 HTTP 协议传输 XML 或 SOAP 消息，它是一个基于 Web（HTTP）的服务架构技术，既可以运行在内网，也可以在适当保护后运行在外网。")]),t._v(" "),a("h3",{attrs:{id:"_6-waf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-waf"}},[t._v("#")]),t._v(" 6. WAF")]),t._v(" "),a("p",[t._v("WAF 是一种 Web 应用程序防护系统（Web Application Firewall，简称 WAF），它是一种通过执行一系列针对HTTP / HTTPS的安全策略来专门为Web应用提供保护的一款产品，它是应用层面的防火墙，专门检测 HTTP 流量，是防护 Web 应用的安全技术。 WAF 通常位于 Web 服务器之前，可以阻止如 SQL 注入、跨站脚本等攻击。")]),t._v(" "),a("h2",{attrs:{id:"与-http-相关的各种协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与-http-相关的各种协议"}},[t._v("#")]),t._v(" 与 HTTP 相关的各种协议")]),t._v(" "),a("h3",{attrs:{id:"_1-tcp-ip-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp-ip-协议"}},[t._v("#")]),t._v(" 1. TCP/IP 协议")]),t._v(" "),a("p",[t._v("TCP/IP 协议是一系列网络通信协议的统称，其中最核心的两个协议是 "),a("strong",[t._v("TCP")]),t._v(" 和 "),a("strong",[t._v("IP")]),t._v("，其他的还有 UDP、ICMP、ARP 等等，共同构成了一个复杂但有层次的协议栈。")]),t._v(" "),a("p",[t._v('这个协议栈有四层，从上至下依次是 "应用层"、"传输层"、"网络层"、"链接层"，TCP 和 IP 分别属于 "传输层" 和 "网络层"。接下来，我们先详细了解一下 TCP/IP 网络分层模型。')]),t._v(" "),a("h4",{attrs:{id:"_1-1-应用层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-应用层"}},[t._v("#")]),t._v(" 1.1 应用层")]),t._v(" "),a("p",[t._v("应用层决定了向用户提供应用服务时通信的活动。")]),t._v(" "),a("p",[t._v("TCP/IP 协议族内预存了各类通用的应用服务。比如，FTP 和 DNS。HTTP 协议也处于该层。")]),t._v(" "),a("h4",{attrs:{id:"_1-2-传输层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-传输层"}},[t._v("#")]),t._v(" 1.2 传输层")]),t._v(" "),a("p",[t._v('传输层对上层应用层，提供处于网络连接中两台计算机之间的数据传输。它的职责是保证数据在 IP 地址标记的两点之间 "可靠" 的传输。')]),t._v(" "),a("p",[t._v("传输层有两个性质不同的协议：TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）")]),t._v(" "),a("p",[a("code",[t._v("TCP 是一个有状态的协议，需要先与对方建立连接然后才能发送数据，而且保证数据不丢失不重复。而 UDP 则比较简单，它无状态，不用事先建立连接就可以任意发送数据，但不保证数据一定会发到对方。两个协议的另一个重要区别在于数据的形式。TCP 的数据是连续的“字节流”，有先后顺序，而 UDP 则是分散的小数据包，是顺序发，乱序收")])]),t._v(" "),a("h4",{attrs:{id:"_1-3-网络层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-网络层"}},[t._v("#")]),t._v(" 1.3 网络层")]),t._v(" "),a("p",[t._v("网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方的计算机，并把数据包传给对方。")]),t._v(" "),a("h4",{attrs:{id:"_1-4-链接层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-链接层"}},[t._v("#")]),t._v(" 1.4 链接层")]),t._v(" "),a("p",[t._v("链接层用来处理连接网络的硬件部分。包括操作系统、硬件的设备驱动、光纤等物理可见部分。")]),t._v(" "),a("h4",{attrs:{id:"tcp-ip-通信传输流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-通信传输流"}},[t._v("#")]),t._v(" TCP/IP 通信传输流")]),t._v(" "),a("p",[a("img",{attrs:{src:_(272),alt:""}})]),t._v(" "),a("p",[t._v("利用 TCP/IP 协议进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层开始往下走，接收端从链接层开始往上走。")]),t._v(" "),a("p",[t._v("我们用 HTTP 举例来说明：")]),t._v(" "),a("p",[t._v("首先作为发送端的客户端在应用层发出一个带有数据的 HTTP 请求。")]),t._v(" "),a("p",[t._v("接着，在传输层，TCP 协议会将 HTTP 协议发送的数据看作一个数据包，并在数据包的前面加上 TCP 包的一部分信息。")]),t._v(" "),a("p",[t._v("接着，在网络层，IP 协议会将 TCP 协议要发送的数据看作一个数据包，同样在这个数据包的前面加上 IP 协议的部首。")]),t._v(" "),a("p",[t._v("接着，在链接层，对应的协议也会在 IP 数据包前面加上以太网的部首。")]),t._v(" "),a("p",[a("img",{attrs:{src:_(273),alt:""}})]),t._v(" "),a("p",[t._v("在接收端，数据链接层会使用对应的协议找到物理层的数据，经过解码得到以太网的部首信息和对应的 IP 数据包。再将 IP 数据包传给上层的网络层。")]),t._v(" "),a("p",[t._v("接着，网络层经过解码得到 IP 协议的首部和对应的 TCP 数据包。再将 TCP 数据包传给上层的传输层。")]),t._v(" "),a("p",[t._v("接着，传输层经过解码得到 TCP 协议的首部和对应的 HTTP 数据包，再将数据包传给上层的应用层。")]),t._v(" "),a("p",[t._v("接着，应用层就就得到从目标设备传送过来的数据。")]),t._v(" "),a("p",[a("img",{attrs:{src:_(274),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_2-dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-dns"}},[t._v("#")]),t._v(" 2. DNS")]),t._v(" "),a("p",[t._v("在 TCP/IP 协议中使用 IP 地址来标识计算机，但数字形式的地址难以记忆，于是"),a("strong",[t._v("域名系统")]),t._v("（Domain Name System）就出现来，用有意义的名字来作为 IP 地址的等价替代。")]),t._v(" "),a("p",[t._v('在 DNS 中， "域名"又称为 "主机名"，为了更好地标记不同国家或组织的主机，让名字更好记，所以被设计成了一个有层次的结构。')]),t._v(" "),a("p",[t._v("域名用 “.” 分隔成多个单词，级别从左到右逐级升高，最右边的被称为 “顶级域名”。对于顶级域名，可能你随口就能说出几个，例如表示商业公司的“com”、表示教育机构的“edu”，表示国家的 “cn”、“uk” 等。")]),t._v(" "),a("p",[t._v("但想要使用 TCP/IP 协议来通信仍然要使用 IP 地址，所以需要把域名做一个转换，“映射” 到它的真实 IP，这就是所谓的 “"),a("strong",[t._v("域名解析")]),t._v("”。")]),t._v(" "),a("h3",{attrs:{id:"_3-uri-url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-uri-url"}},[t._v("#")]),t._v(" 3. URI/URL")]),t._v(" "),a("p",[t._v("要访问网络上的资源，光有 TCP/IP 和 DNS 还不够。因为，DNS 和 IP 地址只是标记了互联网上的主机，但主机上有很多文本、图片、页面，我们并不能知道具体要访问的资源。")]),t._v(" "),a("p",[t._v("所以就出现了 URI（Uniform Resource Identifier），中文名称是 "),a("strong",[t._v("统一资源标识符")]),t._v("，使用它就能够唯一地标记互联网上资源。")]),t._v(" "),a("p",[t._v("URI 另一个更常用的表现形式是 URL（Uniform Resource Locator），"),a("strong",[t._v("统一资源定位符")]),t._v("，也就是我们俗称的 “网址”，它实际上是 URI 的一个子集，不过因为这两者几乎是相同的，差异不大，所以通常不会做严格的区分。")]),t._v(" "),a("p",[t._v("URI 主要由三个基本的部分组成：")]),t._v(" "),a("ol",[a("li",[t._v("协议名：即访问该资源应当使用的协议，常见的有 HTTP、HTTPS、FTP。")]),t._v(" "),a("li",[t._v("主机名：即互联网上主机的标记，可以是域名或者 IP 地址。")]),t._v(" "),a("li",[t._v('路径：即资源在主机上的位置，使用 "/" 分隔多级目录。')])]),t._v(" "),a("p",[t._v("就拿 Nginx 网站来举例，看一下 URI 是什么样子的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("http://nginx.org/en/download.html\n")])])]),a("p",[t._v("其中，http 就是协议名，nginx.org 就是主机名，/en/download.html 就是路径。")]),t._v(" "),a("h3",{attrs:{id:"_4-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-https"}},[t._v("#")]),t._v(" 4. HTTPS")]),t._v(" "),a("p",[t._v("在 TCP/IP、DNS 和 URI 的作用下， HTTP 协议可以在互联网世界里访问任意的网页。但是，HTTP 是明文传输的，这就意味着，在传输的任何节点数据都可以被窃听甚至篡改。这样是非常不安全的。")]),t._v(" "),a("p",[t._v("HTTPS 全称：超文本传输安全协议，常称为 HTTP over SSL/TLS，也就是运行在 SSL/TLS 协议上的 HTTP。SSL/TLS 是一个负责加密通信的安全协议，建立在 TCP/IP 之上，所以也是个可靠的传输协议，可以被用作 HTTP 的下层。")]),t._v(" "),a("p",[t._v("HTTPS 主要作用是：")]),t._v(" "),a("ul",[a("li",[t._v("对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全")]),t._v(" "),a("li",[t._v("对网站服务器进行真实身份认证")])]),t._v(" "),a("h2",{attrs:{id:"http-请求响应过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-请求响应过程"}},[t._v("#")]),t._v(" HTTP 请求响应过程")]),t._v(" "),a("p",[t._v("我们以一道经典的面试题来学习一下 HTTP 请求响应过程。"),a("code",[t._v("在浏览器中输入网址（http://www.cijianshaonian.com/index.html）后，到底发生了什么事情？")])]),t._v(" "),a("ul",[a("li",[t._v("首先 DNS 服务器会对域名 www.cijianshaonian.com 进行解析，找到 www.cijianshaonian.com 多对应的 IP 地址，然后 HTTP 客户端进程会发起一个到服务器 www.cijianshaonian.com 的 TCP 连接，进行"),a("a",{attrs:{href:"https://juejin.cn/post/7045059219216662564",target:"_blank",rel:"noopener noreferrer"}},[t._v("三次握手"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("li",[t._v("TCP 连接建立成功之后，客户端向服务器发送一个 HTTP 请求报文，该报文中包含了要访问的资源路径。")]),t._v(" "),a("li",[t._v("服务端接收到客户端发来的请求报文后，进行请求的解析，并检索出要访问的资源，并将检索出来的对象封装到 HTTP 响应报文中，向客户端进行发送。")]),t._v(" "),a("li",[t._v("服务端随即通知 TCP 断开 TCP 连接，实际上是需要等到客户端接受完响应报文后才会断开 TCP 连接。")]),t._v(" "),a("li",[t._v("客户端接收完响应报文后，TCP 连接会关闭。客户端从响应报文中获取要访问的资源，并呈现给用户。\n上述过程是一个简单的 "),a("code",[t._v("请求-响应")]),t._v(" 过程，真实情况下会比这复杂很多，会涉及到缓存、代理等等，这些我们后面再详细了解。")])]),t._v(" "),a("h3",{attrs:{id:"_1-什么是三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是三次握手"}},[t._v("#")]),t._v(" 1 什么是"),a("a",{attrs:{href:"https://juejin.cn/post/7045059219216662564",target:"_blank",rel:"noopener noreferrer"}},[t._v("三次握手"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("三次握手是建立 TCP 连接的过程，对应还有断开 TCP 连接的四次挥手。")]),t._v(" "),a("ol",[a("li",[t._v("一开始，服务端和客户端都处于 CLOSE 状态。")]),t._v(" "),a("li",[t._v("服务端主动监听某个端口，处理 LISTEN 状态。")]),t._v(" "),a("li",[t._v("客户端随机生成序列号（这里的序列号一般叫做client_isn），并且把标识位设置为 SYN，然后把该报文发送给服务端。")]),t._v(" "),a("li",[t._v("客户端发送完 SYN 报文以后，自己便进入了 SYN_SEND 状态。")]),t._v(" "),a("li",[t._v("服务端接收到了客户端的请求之后，自己也初始化对应的序列号（这里的序列号一般叫做 server_isn）。")]),t._v(" "),a("li",[t._v("服务端在「确认号」字段里填上 client_isn + 1（相当于告诉客户端，已经收到了发送过来的序列号了） ，并且把 SYN 和 ACK 标记位都点亮(置为1)，把该报文发送客户端，服务端的状态变成 SYN-REVD 状态。")]),t._v(" "),a("li",[t._v("客户端收到服务端发送的报文后，就知道服务端已经接收到了自己的序列号（通过确认号就可以知道），并且接收到了服务端的序列号(server_isn)。")]),t._v(" "),a("li",[t._v("此时，客户端需要告诉服务端自己已经接收到了他发送过来的序列号，所以在「确认号」字段上填上 server_isn+1，，并且标记位 ACK 为 1。")]),t._v(" "),a("li",[t._v("客户端在发送报文之后，进入 ESTABLISHED 状态，而服务端接收到客户端的报文之后，也进入 ESTABLISHED 状态。")])]),t._v(" "),a("p",[a("img",{attrs:{src:_(275),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_2-http-报文是怎样的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-http-报文是怎样的"}},[t._v("#")]),t._v(" 2 HTTP 报文是怎样的")]),t._v(" "),a("p",[t._v("HTTP 的请求报文是以 "),a("code",[t._v("header + body")]),t._v(" 的结构，具体而言：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("起始行 + 头部 + 空格 + 实体\n")])])]),a("h4",{attrs:{id:"起始行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#起始行"}},[t._v("#")]),t._v(" 起始行")]),t._v(" "),a("p",[t._v("对于请求报文来说，起始行类似下面这样:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 方法 + 路径 + http版本\nGET /home HTTP/1.1\n")])])]),a("p",[t._v("对于响应报文来说，起始行类似下面这样:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// http版本 + 状态码 + 原因\nHTTP/1.1 200 OK\n")])])]),a("h4",{attrs:{id:"头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#头部"}},[t._v("#")]),t._v(" 头部")]),t._v(" "),a("p",[t._v("展示一下请求头和响应头在报文中的位置:")]),t._v(" "),a("p",[a("img",{attrs:{src:_(276),alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:_(277),alt:""}})]),t._v(" "),a("p",[t._v("不管是请求头还是响应头，其中的字段是相当多的，而且牵扯到 http 非常多的特性，这里就不一一列举的，重点看看这些头部字段的格式：")]),t._v(" "),a("ol",[a("li",[t._v("字段名不区分大小写")]),t._v(" "),a("li",[t._v("字段名不允许出现空格，不可以出现下划线 "),a("code",[t._v("_")])]),t._v(" "),a("li",[t._v("字段名后面必须紧接着 "),a("code",[t._v(":")])])]),t._v(" "),a("h4",{attrs:{id:"空行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空行"}},[t._v("#")]),t._v(" 空行")]),t._v(" "),a("p",[t._v("用来区分开 "),a("code",[t._v("头部")]),t._v(" 和 "),a("code",[t._v("实体")]),t._v(" 。空行后的内容全部被视为 "),a("code",[t._v("实体")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"实体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实体"}},[t._v("#")]),t._v(" 实体")]),t._v(" "),a("p",[t._v("就是具体的数据了，也就是 "),a("code",[t._v("body")]),t._v(" 部分。请求报文对应请求体, 响应报文对应响应体。")]),t._v(" "),a("h3",{attrs:{id:"_3-http-的请求方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-的请求方法"}},[t._v("#")]),t._v(" 3 HTTP 的请求方法")]),t._v(" "),a("p",[a("code",[t._v("http/1.1")]),t._v(" 规定了以下请求方法:")]),t._v(" "),a("ul",[a("li",[t._v("GET: 通常用来获取资源")]),t._v(" "),a("li",[t._v("HEAD: 获取资源的元信息")]),t._v(" "),a("li",[t._v("POST: 提交数据，即上传数据")]),t._v(" "),a("li",[t._v("PUT: 修改数据")]),t._v(" "),a("li",[t._v("DELETE: 删除资源(几乎用不到)")]),t._v(" "),a("li",[t._v("CONNECT: 建立连接隧道，用于代理服务器")]),t._v(" "),a("li",[t._v("OPTIONS: 列出可对资源实行的请求方法，用来跨域请求")]),t._v(" "),a("li",[t._v("TRACE: 追踪请求-响应的传输路径")])]),t._v(" "),a("h3",{attrs:{id:"_4-http-的状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-http-的状态码"}},[t._v("#")]),t._v(" 4 HTTP 的状态码")]),t._v(" "),a("p",[t._v("RFC 规定 HTTP 的状态码为三位数，被分为五类:")]),t._v(" "),a("ul",[a("li",[t._v("1xx: 表示目前是协议处理的中间状态，还需要后续操作。")]),t._v(" "),a("li",[t._v("2xx: 表示成功状态。")]),t._v(" "),a("li",[t._v("3xx: 重定向状态，资源位置发生变动，需要重新请求。")]),t._v(" "),a("li",[t._v("4xx: 请求报文有误。")]),t._v(" "),a("li",[t._v("5xx: 服务器端发生错误。")])]),t._v(" "),a("h4",{attrs:{id:"_1xx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1xx"}},[t._v("#")]),t._v(" 1xx")]),t._v(" "),a("p",[t._v("101 Switching Protocols。在 HTTP 升级为 WebSocket 的时候，如果服务器同意变更，就会发送状态码 101。")]),t._v(" "),a("h4",{attrs:{id:"_2xx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2xx"}},[t._v("#")]),t._v(" 2xx")]),t._v(" "),a("p",[t._v("200 OK是见得最多的成功状态码。通常在响应体中放有数据。")]),t._v(" "),a("p",[t._v("204 No Content含义与 200 相同，但响应头后没有 body 数据。")]),t._v(" "),a("p",[t._v("206 Partial Content 顾名思义，表示部分内容，它的使用场景为 HTTP 分块下载和断点续传，当然也会带上相应的响应头字段Content-Range。")]),t._v(" "),a("h4",{attrs:{id:"_3xx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3xx"}},[t._v("#")]),t._v(" 3xx")]),t._v(" "),a("p",[t._v("301 Moved Permanently 即永久重定向，对应着 302 Found，即临时重定向。")]),t._v(" "),a("p",[t._v("比如你的网站从 HTTP 升级到了 HTTPS 了，以前的站点再也不用了，应当返回 301，这个时候浏览器默认会做缓存优化，在第二次访问的时候自动访问重定向的那个地址。而如果只是暂时不可用，那么直接返回 302 即可，和 301 不同的是，浏览器并不会做缓存优化。")]),t._v(" "),a("p",[t._v("304 Not Modified: 当协商缓存命中时会返回这个状态码。")]),t._v(" "),a("h4",{attrs:{id:"_4xx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4xx"}},[t._v("#")]),t._v(" 4xx")]),t._v(" "),a("p",[t._v("400 Bad Request: 开发者经常看到一头雾水，只是笼统地提示了一下错误，并不知道哪里出错了。")]),t._v(" "),a("p",[t._v("403 Forbidden: 这实际上并不是请求报文出错，而是服务器禁止访问，原因有很多，比如法律禁止、信息敏感。")]),t._v(" "),a("p",[t._v("404 Not Found: 资源未找到，表示没在服务器上找到相应的资源。")]),t._v(" "),a("p",[t._v("405 Method Not Allowed: 请求方法不被服务器端允许。")]),t._v(" "),a("p",[t._v("406 Not Acceptable: 资源无法满足客户端的条件。")]),t._v(" "),a("p",[t._v("408 Request Timeout: 服务器等待了太长时间。")]),t._v(" "),a("p",[t._v("409 Conflict: 多个请求发生了冲突。")]),t._v(" "),a("p",[t._v("413 Request Entity Too Large: 请求体的数据过大。")]),t._v(" "),a("p",[t._v("414 Request-URI Too Long: 请求行里的 URI 太大。")]),t._v(" "),a("p",[t._v("429 Too Many Request: 客户端发送的请求过多。")]),t._v(" "),a("p",[t._v("431 Request Header Fields Too Large请求头的字段内容太大。")]),t._v(" "),a("h4",{attrs:{id:"_5xx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5xx"}},[t._v("#")]),t._v(" 5xx")]),t._v(" "),a("p",[t._v("500 Internal Server Error: 仅仅告诉你服务器出错了，出了啥错咱也不知道。")]),t._v(" "),a("p",[t._v("501 Not Implemented: 表示客户端请求的功能还不支持。")]),t._v(" "),a("p",[t._v("502 Bad Gateway: 服务器自身是正常的，但访问的时候出错了，啥错误咱也不知道。")]),t._v(" "),a("p",[t._v("503 Service Unavailable: 表示服务器当前很忙，暂时无法响应服务。")]),t._v(" "),a("h3",{attrs:{id:"_5-http-的请求头、响应头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-http-的请求头、响应头"}},[t._v("#")]),t._v(" 5 HTTP 的请求头、响应头")]),t._v(" "),a("h4",{attrs:{id:"content-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#content-type"}},[t._v("#")]),t._v(" Content-Type")]),t._v(" "),a("p",[t._v("Content-Type 用来标记发送端报文 "),a("code",[t._v("body")]),t._v(" 部分的数据类型，对于接收端可以使用 Accept")]),t._v(" "),a("p",[t._v("具体取值可以分为下面几类：")]),t._v(" "),a("ul",[a("li",[t._v("text： text/html, text/plain, text/css 等")]),t._v(" "),a("li",[t._v("image: image/gif, image/jpeg, image/png 等")]),t._v(" "),a("li",[t._v("audio/video: audio/mpeg, video/mp4 等")]),t._v(" "),a("li",[t._v("application: application/json, application/javascript, application/pdf, application/octet-stream")])]),t._v(" "),a("h4",{attrs:{id:"content-language"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#content-language"}},[t._v("#")]),t._v(" Content-Language")]),t._v(" "),a("p",[t._v("Content-Language 用来指定支持的语言，在接受方对应的字段为 "),a("code",[t._v("Accept-Language")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 发送端\nContent-Language: zh-CN, zh, en\n\n// 接收端\nAccept-Language: zh-CN, zh, en\n\n")])])]),a("h4",{attrs:{id:"content-encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#content-encoding"}},[t._v("#")]),t._v(" Content-Encoding")]),t._v(" "),a("p",[t._v("Content-Encoding 用来标记发送端报文 "),a("code",[t._v("body")]),t._v(" 的压缩方式，对于接收端可以使用 Accept-Content-Encoding。这个字段的取值有下面几种：")]),t._v(" "),a("ul",[a("li",[t._v("gzip: 当今最流行的压缩格式")]),t._v(" "),a("li",[t._v("deflate: 另外一种著名的压缩格式")]),t._v(" "),a("li",[t._v("br: 一种专门为 HTTP 发明的压缩算法")])]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 发送端\nContent-Language: zh-CN, zh, en\n\n// 接收端\nAccept-Language: zh-CN, zh, en\n\n")])])]),a("h3",{attrs:{id:"nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("// 查看 nginx 安装目录\nweheris nginx\n\n// 启动 nginx\nsystemctl start nginx\n\n// 停止 nginx\nsystemctl stop nginx\n\n// 启动 nginx\nsystemctl reload nginx\n\n// 强制重启 nginx\nsystemctl restart nginx\n\n// 设置开机启动 nginx\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" nginx\n\n// 查询 nginx 状态\nsystemctl status nginx\n\n// 代理缓存       存放目录  是否创建二级文件夹   10m 缓存大小\nproxy_cache_path cache "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("levels")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":2 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("keys_zone")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("my_cache:10m\n// 使用代理缓存的时候 往往需要和 response header  Vary 一起使用\n\nserver "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  listen    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  server_name test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    proxy_cache my_cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 使用代理缓存\n    proxy_pass http://127.0.0.1:8888"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 表示所有的请求都代理到这个地方\n    proxy_set_header Host "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$host")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);