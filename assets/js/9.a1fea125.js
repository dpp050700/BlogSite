(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{317:function(t,s,e){t.exports=e.p+"assets/img/vite-pre-bundle-1.d07108e4.jpg"},318:function(t,s,e){t.exports=e.p+"assets/img/vite-pre-bundle-2.a7d2cceb.jpg"},319:function(t,s,e){t.exports=e.p+"assets/img/vite-pre-bundle-3.1d0a07bb.jpg"},320:function(t,s,e){t.exports=e.p+"assets/img/vite-pre-bundle-4.740c91c7.jpg"},380:function(t,s,e){"use strict";e.r(s);var a=e(13),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("本文我们将介绍 Vite 如何进行依赖预构建。")]),t._v(" "),s("h2",{attrs:{id:"为什么需要预构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要预构建"}},[t._v("#")]),t._v(" 为什么需要预构建 "),s("a",{attrs:{href:"https://cn.vitejs.dev/guide/dep-pre-bundling.html",target:"_blank",rel:"noopener noreferrer"}},[s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("首先，Vite 的 Dev Server 是基于浏览器原生 ES 模块规范实现。所以，不论是我们的源码还是第三方依赖的代码，都必须符合 ESM 规范。 然而，很多第三方依赖仍然没有 ES 版本的产物，所以需要将它转换成 ESM 格式的产物。")]),t._v(" "),s("p",[t._v("其次，我们知道 Vite 中每一个 import 都会变成一个 HTTP 请求，有些第三方库会依赖很多其他模块。那么在加载的时候就会发出很多请求，由于 HTTP 的连接数限制，这就可能会导致页面的卡顿。")]),t._v(" "),s("h2",{attrs:{id:"如何开启预构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何开启预构建"}},[t._v("#")]),t._v(" 如何开启预构建")]),t._v(" "),s("p",[t._v("在 Vite 中有两种开启预构建的方式，分别是自动开启和手动开启。")]),t._v(" "),s("h3",{attrs:{id:"自动开启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动开启"}},[t._v("#")]),t._v(" 自动开启")]),t._v(" "),s("p",[t._v("当我们项目启动完成之后，打开 "),s("code",[t._v("node_modules")]),t._v(" 目录，可以发现 "),s("code",[t._v("node_modules")]),t._v(" 下多了一个 "),s("code",[t._v(".vite")]),t._v(" 目录：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(317),alt:""}})]),t._v(" "),s("p",[t._v("其实 "),s("code",[t._v(".vite")]),t._v(" 目录下存放就是预构建产物文件。")]),t._v(" "),s("p",[t._v("打开页面，开启 "),s("code",[t._v("Dev Tools")]),t._v("，选择 "),s("code",[t._v("Network")])]),t._v(" "),s("p",[s("img",{attrs:{src:e(318),alt:""}})]),t._v(" "),s("p",[t._v("可以看到浏览器加载了很多 JS 文件，我们选中其中的 "),s("code",[t._v("react.js")]),t._v(" 看一下，可以发现 react 的引入路径已经被重写")]),t._v(" "),s("p",[s("img",{attrs:{src:e(319),alt:""}})]),t._v(" "),s("p",[t._v("并且，该文件被设置为缓存一年过期。那么，下次再访问该文件的时候会直接走浏览器缓存，并不会再经过 Vite Dev Server。\n"),s("img",{attrs:{src:e(320),alt:""}})]),t._v(" "),s("p",[s("code",[t._v(".vite")]),t._v(" 目录中的缓存文件会在以下几种情况下发生更新：")]),t._v(" "),s("ol",[s("li",[t._v("package.json 的 "),s("code",[t._v("dependencies")]),t._v(" 字段发生改变")]),t._v(" "),s("li",[t._v("各种包管理器的 lock 文件发生改变")]),t._v(" "),s("li",[s("code",[t._v("optimizeDeps")]),t._v(" 配置内容被修改")])]),t._v(" "),s("h3",{attrs:{id:"手动开启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手动开启"}},[t._v("#")]),t._v(" 手动开启")]),t._v(" "),s("p",[t._v("上面提到了预构建中本地文件系统的产物缓存机制，而少数场景下我们不希望用本地的缓存文件，比如需要调试某个包的预构建结果，我推荐使用下面任意一种方法清除缓存，还有手动开启预构建:")]),t._v(" "),s("ol",[s("li",[t._v("删除 "),s("code",[t._v("node_modules/.vite")]),t._v(" 目录。")]),t._v(" "),s("li",[t._v("在 Vite 配置文件中，将 "),s("code",[t._v("optimizeDeps.force")]),t._v(" 设为 "),s("code",[t._v("true")])]),t._v(" "),s("li",[t._v("命令行执行 "),s("code",[t._v("npx vite --force")]),t._v(" 或者 "),s("code",[t._v("npx vite optimize")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"optimizedeps-配置详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#optimizedeps-配置详解"}},[t._v("#")]),t._v(" optimizeDeps 配置详解")]),t._v(" "),s("h3",{attrs:{id:"入口文件-entries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#入口文件-entries"}},[t._v("#")]),t._v(" 入口文件 entries")]),t._v(" "),s("p",[t._v("默认情况下，Vite 会抓取你的 index.html 来检测需要预构建的依赖项。如果指定了 build.rollupOptions.input，Vite 将转而去抓取这些入口点。")]),t._v(" "),s("p",[t._v("如果这两者都不合你意，则可以使用此选项指定自定义条目——该值需要遵循 fast-glob 模式 ，或者是相对于 Vite 项目根目录的匹配模式数组。当显式声明了 optimizeDeps.entries 时默认只有 node_modules 和 build.outDir 文件夹会被忽略。如果还需忽略其他文件夹，你可以在模式列表中使用以 ! 为前缀的、用来匹配忽略项的模式。")]),t._v(" "),s("h3",{attrs:{id:"排除依赖-exclude"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排除依赖-exclude"}},[t._v("#")]),t._v(" 排除依赖 exclude")]),t._v(" "),s("p",[s("code",[t._v("exclude")]),t._v(" 用来 在预构建中强制排除的依赖项。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("optimizeDeps")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("exclude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lodash-es'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"添加依赖-include"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加依赖-include"}},[t._v("#")]),t._v(" 添加依赖 include")]),t._v(" "),s("p",[s("code",[t._v("include")]),t._v(" 用来指明需要强制预构建的依赖项。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("optimizeDeps")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lodash-es'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("inclued")]),t._v(" 使用场景: 动态 import")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/locales/zh_CN.ts")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" objectAssign "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object-assign"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.tsx")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("importModule")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("./locales/")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(".ts")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("importModule")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zh_CN"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("在这个例子中，动态 import 的路径只有运行时才能确定，无法在预构建阶段被扫描出来。因此，Vite 运行时发现了新的依赖，随之重新进行依赖预构建，并刷新页面。这个过程也叫"),s("strong",[t._v("二次预构建")]),t._v("。在一些比较复杂的项目中，这个过程会执行很多次。")]),t._v(" "),s("p",[t._v("然而，二次预构建的成本也比较大。我们不仅需要把预构建的流程重新运行一遍，还得重新刷新页面，并且需要重新请求所有的模块。尤其是在大型项目中，这个过程会严重拖慢应用的加载速度！因此，我们要尽力避免运行时的二次预构建。我们可以通过 "),s("code",[t._v("include")]),t._v(" 参数提前声明需要按需加载的依赖。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.ts")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("optimizeDeps")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按需加载的依赖都可以声明到这个数组里")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object-assign"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"esbuildoptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#esbuildoptions"}},[t._v("#")]),t._v(" esbuildOptions")]),t._v(" "),s("p",[s("code",[t._v("esbuildOptions")]),t._v(" 参数在预购的时候将传递给 esbuild 的选项。")]),t._v(" "),s("p",[t._v("需要注意的是，某些选项进行了省略，因为修改它们与 Vite 的优化方案并不兼容。")]),t._v(" "),s("ul",[s("li",[t._v("忽略了 "),s("code",[t._v("external")]),t._v(" 选项，请使用 Vite 的 "),s("code",[t._v("optimizeDeps.exclude")]),t._v(" 选项")]),t._v(" "),s("li",[t._v("plugins 与 Vite 的 dep 插件合并")])]),t._v(" "),s("h3",{attrs:{id:"force"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#force"}},[t._v("#")]),t._v(" force")]),t._v(" "),s("p",[t._v("设置为 true 可以强制依赖预构建，而忽略之前已经缓存过的、已经优化过的依赖。")])])}),[],!1,null,null,null);s.default=n.exports}}]);